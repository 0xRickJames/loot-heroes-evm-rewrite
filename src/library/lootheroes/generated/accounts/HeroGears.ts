/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link HeroGears}
 * @category Accounts
 * @category generated
 */
export type HeroGearsArgs = {
  helm: beet.COption<string>
  neck: beet.COption<string>
  shoulders: beet.COption<string>
  ring: beet.COption<string>
  chest: beet.COption<string>
  hands: beet.COption<string>
  weapon: beet.COption<string>
  legs: beet.COption<string>
}

export const heroGearsDiscriminator = [207, 11, 202, 143, 101, 105, 51, 204]
/**
 * Holds the data for the {@link HeroGears} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class HeroGears implements HeroGearsArgs {
  private constructor(
    readonly helm: beet.COption<string>,
    readonly neck: beet.COption<string>,
    readonly shoulders: beet.COption<string>,
    readonly ring: beet.COption<string>,
    readonly chest: beet.COption<string>,
    readonly hands: beet.COption<string>,
    readonly weapon: beet.COption<string>,
    readonly legs: beet.COption<string>
  ) {}

  /**
   * Creates a {@link HeroGears} instance from the provided args.
   */
  static fromArgs(args: HeroGearsArgs) {
    return new HeroGears(
      args.helm,
      args.neck,
      args.shoulders,
      args.ring,
      args.chest,
      args.hands,
      args.weapon,
      args.legs
    )
  }

  /**
   * Deserializes the {@link HeroGears} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [HeroGears, number] {
    return HeroGears.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link HeroGears} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<HeroGears> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find HeroGears account at ${address}`)
    }
    return HeroGears.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '2XsnJYKTJ45JYDgRzkcEDQBNhjg1FaY8YhQaB9EqbQAb'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, heroGearsBeet)
  }

  /**
   * Deserializes the {@link HeroGears} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [HeroGears, number] {
    return heroGearsBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link HeroGears} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return heroGearsBeet.serialize({
      accountDiscriminator: heroGearsDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link HeroGears} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: HeroGearsArgs) {
    const instance = HeroGears.fromArgs(args)
    return heroGearsBeet.toFixedFromValue({
      accountDiscriminator: heroGearsDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link HeroGears} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: HeroGearsArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      HeroGears.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link HeroGears} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      helm: this.helm,
      neck: this.neck,
      shoulders: this.shoulders,
      ring: this.ring,
      chest: this.chest,
      hands: this.hands,
      weapon: this.weapon,
      legs: this.legs,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const heroGearsBeet = new beet.FixableBeetStruct<
  HeroGears,
  HeroGearsArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['helm', beet.coption(beet.utf8String)],
    ['neck', beet.coption(beet.utf8String)],
    ['shoulders', beet.coption(beet.utf8String)],
    ['ring', beet.coption(beet.utf8String)],
    ['chest', beet.coption(beet.utf8String)],
    ['hands', beet.coption(beet.utf8String)],
    ['weapon', beet.coption(beet.utf8String)],
    ['legs', beet.coption(beet.utf8String)],
  ],
  HeroGears.fromArgs,
  'HeroGears'
)
